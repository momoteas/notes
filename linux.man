
1. 权限管理：
		创建用户：
			useradd:	useradd andy
			passwd:		passwd ******
		
		修改属性：
			mkdir /var/swapdata
				1,权限修正：
				chmod  770  swapdata   |  chmod  o-rwx g+rwx   swapdata
				
				2,修正属组
				groupadd sxtswap
				usermod -a -G sxtswap sxt01		#将sxt01的（-G）组（-a append）追加一个sxtswap;
				usermod -a -G sxtswap sxt02
				chown  root:sxtswap swapdata	#更改swapdata的所有者为root, 所属组为sxtswap;
				chown :sxtswap   ooxx.file		#更改ooxx.file的所有者为当前所有者，所属组为sxtswap;
				chmod  770 ooxx.file

				
2. 安装软件：
		方式：
			编译安装；个性化安装，删除某些不需要的部分；
			rpm包安装：如oracle的jdk，需要在oracle的网站进行同意相关协议后，方可下载软件包，然后进行rpm安装；
			yum仓库安装：yum仓库只存放某些免费且开源的软件；
			
		安装步骤：
			a. 解压软件包；
			b. 阅读README文件，含相关安装指导说明；
			c. ./configure --help: 阅读相关辅助安装选项说明
			d. make 进行编译；
			e. make install 将编译完成后的文件复制到相关文件系统目中；
			注意事项：编译过程中缺少的相关依赖可以通过error信息得到提示；
					  可以通过阅读makefile文件加深对编译安装过程的理解；
					  
		rpm:
			安装：
				-ivh  filename
				--prefix
			升级：
				-Uvh
				-Fvh
			卸载：
				-e PACKAGE_NAME
			查询：
				rpm -qa : 查询已经安装的所有包
				rpm -q  PACKAGE_NAME: 查询指定的包是否已经安装
				rpm -qi PACKAGE_NAME: 查询指定包的说明信息
				rpm -ql PACKAGE_NAME: 查询指定包安装后生成的文件列表
				rpm -qc PACEAGE_NEME：查询指定包安装的配置文件
				rpm -qd PACKAGE_NAME: 查询指定包安装的帮助文件
				rpm -q --scripts PACKAGE_NAME: 查询指定包中包含的脚本	
				rpm -qf /path/to/somefile: 查询文件是由哪个rpm包安装生成的	
				如果某rpm包尚未安装，需查询其说明信息、安装以后会生成的文件
				rpm -qpi /PATH/TO/PACKAGE_FILE
				rpm -qpl 
		
		yum:
			安装:
				基于rpm包管理
				提供rpm仓库
			repo：
				/etc/yum.repos.d/	(配置文件)
				[repoID]
				baseurl=
				http://
				file://
				ftp://
				gpgcheck=1/0
				enable=0/  1
			仓库设置：
				repo国内源：
					http://mirrors.aliyun.com
					centos-->help
					before:yum install wget
					....
				repo本地目录源：
					mount /dev/cdrom /mnt
					vi /etc/yum.repos.d/local.repo
					[local]
					baseurl=file:///mnt
					gpgcheck=0
					enable=1
			yum命令：
				yum repolist
				yum clean all
				yum makecache
				yum update
			查询：
				yum list
				yum search
				yum info
			安装&卸载：
				yum install 
				remove | erase
			yum组命令：
				yum grouplist
				yum groupinfo
				yum groupinstall
				yum groupremove
				yum groupupdate



			
			
3. sed行编辑器：
		sed [options] 'AddressCommand' file ...
			-n: 静默模式，不再默认显示模式空间中的内容
			-i: 直接修改原文件
			-e SCRIPT -e SCRIPT:可以同时执行多个脚本
			-f /PATH/TO/SED_SCRIPT
			-r: 表示使用扩展正则表达式
			-d: 删除符合条件的行；
			-p: 显示符合条件的行；
			-a \string: 在指定的行后面追加新行，内容为string
			   \n：可以用于换行
			-i \string: 在指定的行前面添加新行，内容为string
			-r FILE: 将指定的文件的内容添加至符合条件的行处
			-w FILE: 将地址指定的范围内的行另存至指定的文件中; 
			-s/pattern/string/修饰符: 查找并替换，默认只替换每行中第一次被模式匹配到的字符串
			-g: 行内全局替换
			-i: 忽略字符大小写
			-s///: s###, s@@@	
				\(\), \1, \2
				
		Address：
			可以没有
			给定范围
			查找指定行/str/

		例如：sed  's/\(id:\)[0-6]\(:initdefault:\)/\15\2/ig'  inittab

		
4. awk:
		简介：
			awk是一个强大的文本分析工具。
			相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。
			简单来说awk就是把文件逐行的读入，（空格，制表符）为默认分隔符将每行切片，切开的部分再进行各种分析处理。

		功能：
			awk -F '{pattern + action}' {filenames}
				支持自定义分隔符
				支持正则表达式匹配
				支持自定义变量，数组  a[1]  a[tom]  map(key)
				支持内置变量
				ARGC               命令行参数个数
				ARGV               命令行参数排列
				ENVIRON            支持队列中系统环境变量的使用
				FILENAME           awk浏览的文件名
				FNR                浏览文件的记录数
				FS                 设置输入域分隔符，等价于命令行 -F选项
				NF                 浏览记录的域的个数
				NR                 已读的记录数
				OFS                输出域分隔符
				ORS                输出记录分隔符
				RS                 控制记录分隔符
				支持函数
				print、split、substr、sub、gsub
				支持流程控制语句，类C语言
				if、while、do/while、for、break、continue
				
		例如：
			只是显示/etc/passwd的账户:CUT
			awk -F':' '{print $1}' passwd
			
			只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行开始前添加列名name,shell,
			在最后一行添加"blue,/bin/nosh"（cut，sed）
			awk -F':' 'BEGIN{print "name,shell"} {print $1 "," $7} END{print "blue,/bin/nosh"}' passwd
			
			搜索/etc/passwd有root关键字的所有行
			awk  '/root/ { print $0}'   passwd
			统计/etc/passwd文件中，每行的行号，每行的列数，对应的完整行内容

			统计报表：合计每人1月工资，0：manager，1：worker
				Tom	 0   2012-12-11      car     3000
				John	 1   2013-01-13      bike    1000
				vivi	 1   2013-01-18      car     2800
				Tom	 0   2013-01-20      car     2500
				John	 1   2013-01-28      bike    3500
			awk  '{
					split($3,date,"-");
					if(date[2]=="01"){
						name[$1]+=$5
					}
				  } 
					END{
						for(i in name){
						print i "\t" name[i]}
					}'   
					awk.txt
					
					
5. 重定向：
		重定向：不是命令
			程序自身都有I/O
				0：标准输入
				1：标准输出
				2：错误输出
			控制程序I/O位置
			一切皆文件
			/proc/$$/fd
			程序是否处理I/O？
			绑定顺序：从左到右
			
		例如：	
			ls -l /   /god   1> out.txt   2>&    1
				1，重定向有顺序
				2，重定向操作符，
				左侧与文件描述符不能有空格
				右侧，如果也是文件描述符，需要搭配&，同时与&符号不能有空格

		输出重定向：
			修改程序的1或2
			>
			>>：追加
			&>,>&			
					
		输入重定向：
			<：文件
			<<： 多行，但以换行符作为结点
			<<<：单行输入			
					
		全重定向：socket案例
			exec 8<> /dev/tcp/www.baidu.com/80 （输入/输出都指向8文件描述符）
			echo -e "GET / HTTP/1.0\n" >& 8
			cat <& 8


6. shell编程
		a. 基本语法：
				$:	变量值引用
				$1, $2: 参数引用
				系统变量：$HOME, $PWD, $SHELL, $USER
				set: 查看系统变量
				
		b. 定义变量：
				变量=值：
						等号两侧不能有空格			
						变量名一般大写
						双引号和单引号有区别：双引号仅将空格脱意，单引号会将所有特殊字符脱意
				
				unset 变量名：
						撤销变量A
		
		将命令返回值赋给变量：
				A=`ls -la` 反引号，运行里面的命令，并把结果返回给变量A

		特殊变量：
				$? 表示上一个命令退出的状态
				$$ 表示当前进程编号
				$0 表示当前脚本名称
				$n 表示n位置的输入参数（n代表数字，n>=1）
				$# 	表示参数的个数，常用于循环
				$*和$@ 都表示参数列表 

		运算符：
				格式 :expr m + n 或$((m+n)) 注意expr运算符间要有空格

		for循环：
				第一种：
					for N in 1 2 3
					do
						echo $N
					done
					或
					for N in 1 2 3; do echo $N; done
					或
					for N in {1..3}; do echo $N; done

				第二种：
					for ((i = 0; i <= 5; i++))
					do
						echo "welcome $i times"
					done

		while循环：
				第一种
					while expression
					do
					command
					…
					done

				第二种
					i=1
					while ((i<=3))
					do
					  echo $i
					  let i++
					done
		
		case语句：
				格式
					case $1 in
					start)
						echo "starting"
						;;
					stop)
						echo "stoping"
						;;
					*)
						echo "Usage: {start|stop} “
					esac

		read命令：
				read -p(提示语句)-n(字符个数) -t(等待时间) 
					ead -p "please input your name: " NAME

		if语句：
				语法
					if condition 
					then 
					   statements 
					[elif condition 
					   then statements. ..] 
					[else 
					   statements ] 
					fi

		判断语句：
				[ condition ] (注意condition前后要有空格)
					#非空返回true，可使用$?验证（0为true，>1为false）
					[ itcast ]

					#空返回false
					[  ]

				[ condition ] && echo OK || echo notok
					条件满足，执行后面的语句

		常用判断条件：
				= 字符串比较
				-lt 小于
				-le 小于等于
				-eq 等于
				-gt 大于
				-ge 大于等于
				-ne 不等于

				-r 有读的权限
				-w 有写的权限
				-x 有执行的权限
				-f 文件存在并且是一个常规的文件
				-s 文件存在且不为空
				-d 文件存在并是一个目录
				-b文件存在并且是一个块设备
				-L 文件存在并且是一个链接

		shell自定义函数：
				语法
				[ function ] funname [()]
				{
				    action;
				    [return int;]
				}

					function start()  / function start / start()

		脚本调试：
				sh -vx helloWorld.sh
				或者在脚本中增加set -x
				
		注意事项： 
				1>. IFS:
						环境变量IFS包含三个ascii码字符，空格，\t, \n，该环境变量用于shell对行字符串进行切分使用。
					应用场景：ls -l /bin, shell自动进行切分；
				   
				2>. &&：
						在编写shell脚本时，涉及逻辑连接时，一般建议使用一种统计的连接符，取反情况结合！使用；
						例如，如下为自动添加user脚本：
							#!/bin/bash

							[ ! $# -eq 1 ] && echo "args error..." && exit 1

							id $1 >& /dev/null  && echo "user already exists..." && exit 1

							useradd $1 >& /dev/null

							echo $! | passwd --stdin >& /dev/null

							echo "user added successfully..."

							exit 0
							
				3>. "" vs '':
						在shell中，“”为弱引用，可以解释“$1”双引号中的变量引用；而‘’单引号为强引用，即忽略单引号的特殊定义；
						使用场景：在shell脚本中使用awk命令时，一般使用‘’单引号；

							
				4>. 管道 |：
						注，管道两边的时命令，即需要开辟子进程进行执行；

				
				5>. 命令替换 $()和``：
						含义：即先执行$()和``中的命令，然后将执行结果替换$()和``中的内容，即命令替换；
						
						
				6>. 变量替换 ${}：
						含义：与命令替换含义相同；
						
						
				7>. shell中的七步扩展：
						含义：即对于一条命令，shell会优先按照如下顺序，对命令进行扩展替换，然后再整体执行；
							1). 花括号  mkdir  -p sdfsdf/{a,b,c}sdfsdf
							2). 波浪线 cd ~god
							3). 变量&参数  $  $$  ${}(.....)
							4). 命令替换 ls -l `echo $path`
							5). 算术扩展  num=$((3+4))
							6). word拆分，$IFS
							7). 路径  *（零到多个任意字符）？
							8). 引用删除   echo "hello"
							*). 重定向  >  

						参考：man bash
				
				
				8>. shell学习：
						help: 内部命令帮助
						man: 详细帮助
						man bash: shell文档
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				


		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		