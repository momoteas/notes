
1. 配置网络：
		a. ip地址：
				vi /etc/sysconfig/network-script/ifconfig-ens..:
					IPADDR = 192.168.121.xxx
					NETMASK = 255.255.255.0
					GATEWAY = 与虚拟机的路由器地址保持一致
					DNS2 = 与路由器地址保持一致
					DNS1 = 114.114.114.114
		
		b. 开启网络：
				vi /etc/sysconfig/network
					NETWORKING = yes
					HOSTNAME = xxx
		
		c. 别名（域名）
				vi /etc/hosts
					192.168.121.xxx  master(别名)
					...
					...
		
		d. 测试
				ping ip地址 or 别名
		

2. 免密登录：
		a. 生成密码：
				ssh-keygen
		
		b. 将免密文件复制到目标客户机
				ssh-copy-id root@客户机 （注：以后将会以root的身份进行免密登录）
				

3. mysql安装：
		a. 安装mysql（mariadb.x86_64是mysql的一个社区版本）:
				yum install -y mysql
		
		b. 安装mariadb-server:
				yum install mariadb-server
		
		c. 初始化密码（通过上述mariadb.server进行初始化）：
				mysql_secure_installation命令设置密码
		
		d. mariadb远程访问设置：
			GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'IDENTIFIED BY '123456' WITH GRANT OPTION; #123456是远程访问的密码，修改成你需要密码
			flush privileges; #刷新一下


4. 远程文件操作：
		a. 远程拷贝：
				scp [-r] file_name root@客户机:/目标地址
		
		b. 远程下载：
				Alt + p 快捷键调研sfty窗口
				put file_name


5. vim快捷键：
		G: 		文件最后一行
		yy:		复制当前行
		dd:		删除当前行
		o:		下一行插入一行
		A：		定位至行尾
		ctrl + f: 向前翻页
		ctrl + b: 向后翻页
		
		
6. linux命令：
		export:	自定义变量，会对自己所在的shell进程及子进程生效				
		source:	读取并执行文件中的命令（source /etc/profile）
		service service_name start: 启动服务
		systemctl start service_name: 启动服务
		netstat -nltp: 查看网络连接，路由表等
		iptables: 防火墙（centos 6）
		firewalld: 防火墙
		chkconfig service_name on(off): 更新或查询系统服务启动等级
		systemctl stop firewalld: 临时关闭防火墙
		systemctl disable firewalld: 禁止防火墙（centos 7）
		firewall-cmd --state： 查看防火墙状态		
		
		chmod:	更改文件权限
		ps -ef: 
				ps: process state
				-e:	entire
				-f: Do full-format listing
		pstree:	查看当前shell进程树
		
7. zookeeper:
		a. 依赖：	jdk
		

8. shell编程
		a. 基本语法：
				$:	变量值引用
				$1, $2: 参数引用
				系统变量：$HOME, $PWD, $SHELL, $USER
				set: 查看系统变量
				
		b. 定义变量：
				变量=值：
						等号两侧不能有空格			
						变量名一般大写
						双引号和单引号有区别：双引号仅将空格脱意，单引号会将所有特殊字符脱意
				
				unset 变量名：
						撤销变量A
		
		将命令返回值赋给变量：
				A=`ls -la` 反引号，运行里面的命令，并把结果返回给变量A

		特殊变量：
				$? 表示上一个命令退出的状态
				$$ 表示当前进程编号
				$0 表示当前脚本名称
				$n 表示n位置的输入参数（n代表数字，n>=1）
				$# 	表示参数的个数，常用于循环
				$*和$@ 都表示参数列表 

		运算符：
				格式 :expr m + n 或$((m+n)) 注意expr运算符间要有空格

		for循环：
				第一种：
					for N in 1 2 3
					do
						echo $N
					done
					或
					for N in 1 2 3; do echo $N; done
					或
					for N in {1..3}; do echo $N; done

				第二种：
					for ((i = 0; i <= 5; i++))
					do
						echo "welcome $i times"
					done

		while循环：
				第一种
					while expression
					do
					command
					…
					done

				第二种
					i=1
					while ((i<=3))
					do
					  echo $i
					  let i++
					done
		
		case语句：
				格式
					case $1 in
					start)
						echo "starting"
						;;
					stop)
						echo "stoping"
						;;
					*)
						echo "Usage: {start|stop} “
					esac

		read命令：
				read -p(提示语句)-n(字符个数) -t(等待时间) 
					ead -p "please input your name: " NAME

		if语句：
				语法
					if condition 
					then 
					   statements 
					[elif condition 
					   then statements. ..] 
					[else 
					   statements ] 
					fi

		判断语句：
				[ condition ] (注意condition前后要有空格)
					#非空返回true，可使用$?验证（0为true，>1为false）
					[ itcast ]

					#空返回false
					[  ]

				[ condition ] && echo OK || echo notok
					条件满足，执行后面的语句

		常用判断条件：
				= 字符串比较
				-lt 小于
				-le 小于等于
				-eq 等于
				-gt 大于
				-ge 大于等于
				-ne 不等于

				-r 有读的权限
				-w 有写的权限
				-x 有执行的权限
				-f 文件存在并且是一个常规的文件
				-s 文件存在且不为空
				-d 文件存在并是一个目录
				-b文件存在并且是一个块设备
				-L 文件存在并且是一个链接

		shell自定义函数：
				语法
				[ function ] funname [()]
				{
				    action;
				    [return int;]
				}

					function start()  / function start / start()

		脚本调试：
				sh -vx helloWorld.sh
				或者在脚本中增加set -x

				
9. hadoop安装相关问题：
		a. ./autogen.sh: 4: autoreconf: not found:
			因为没有安装automake 工具, sudo apt-get install autoconf automake libtool
				
		b. CMake Error: your CXX compiler: "CMAKE_CXX_COMPILER-NOTFOUND" was not found.   Please set CMAKE_CXX_COMPILER
			to a valid compiler path or name.

			出现这个问题的原因是缺少了g++编译工具执行命令：yum install gcc-c++       		
				
		c. hadoop安装依赖：
			maven, ant, protobuf(>2.5.0版本), findbugs, autoconf, auto make, libtool, cmake, openssl-devel, ncurses-devel,
			zlib-devel, gcc-c++
				

10. hadoop相关配置：
		a. 配置：
			../etc/hadoop/中的相关5个文件：hadoop.env.sh, core-site.xml, hdfs-site.xml, mapred-site.xml, yarn-site.xml；
		
		b. 配置：
			hadoop中bin, sbin文件夹中的命令的环境变量；

		c. 格式化namenode:
				hdfs namenode -format
				
		d. 自动化启动：
			1). 更改文件：../etc/hadoop/slaves，此文件为脚本自动启动datanode, nodemanager的slave机器
			2). 脚本命令：../sbin: 
				首先启动namenode，datanode: start-dfs.sh；
				其次启动resourcemanager, nodemanager: start-yarn.sh
		
		e. win7环境中使用eclipse编写hadoop客户端程序时，出现：java.lang.NullPointerException 
			at java.lang.ProcessBuilder.start(Unknown Source) at org.apache.hadoop.util.Shell.runCommand(Shell.java:482)
			解决方法：
				1). 使用在windows环境编译的hadoop中的../bin 和 ../lib文件夹中的文件；
				2). 给../bin文件夹配置环境变量；
				3). 在../system32文件夹中加入hadoop.dll文件；
	
================================================================================================================
	
11. hadoop HA配置：
	   hadoop2.0已经发布了稳定版本了，增加了很多特性，比如HDFS HA、YARN等。最新的hadoop-2.6.4又增加了YARN HA

       注意：apache提供的hadoop-2.6.4的安装包是在32位操作系统编译的，因为hadoop依赖一些C++的本地库，
       所以如果在64位的操作上安装hadoop-2.6.4就需要重新在64操作系统上重新编译
       （建议第一次安装用32位的系统，我将编译好的64位的也上传到群共享里了，如果有兴趣的可以自己编译一下）
       
       前期准备就不详细说了，课堂上都介绍了
       1.修改Linux主机名
       2.修改IP
       3.修改主机名和IP的映射关系 /etc/hosts
       	######注意######如果你们公司是租用的服务器或是使用的云主机（如华为用主机、阿里云主机等）
       	/etc/hosts里面要配置的是内网IP地址和主机名的映射关系	
       4.关闭防火墙
       5.ssh免登陆
       6.安装JDK，配置环境变量等
       
       集群规划：
       	主机名		IP				安装的软件					运行的进程
       	mini1	192.168.1.200	jdk、hadoop					NameNode、DFSZKFailoverController(zkfc)
       	mini2	192.168.1.201	jdk、hadoop					NameNode、DFSZKFailoverController(zkfc)
       	mini3	192.168.1.202	jdk、hadoop					ResourceManager 
       	mini4	192.168.1.203	jdk、hadoop					ResourceManager
       	mini5	192.168.1.205	jdk、hadoop、zookeeper		DataNode、NodeManager、JournalNode、QuorumPeerMain
       	mini6	192.168.1.206	jdk、hadoop、zookeeper		DataNode、NodeManager、JournalNode、QuorumPeerMain
       	mini7	192.168.1.207	jdk、hadoop、zookeeper		DataNode、NodeManager、JournalNode、QuorumPeerMain
       	
       说明：
       	1.在hadoop2.0中通常由两个NameNode组成，一个处于active状态，另一个处于standby状态。Active NameNode对外提供服务，而Standby NameNode则不对外提供服务，仅同步active namenode的状态，以便能够在它失败时快速进行切换。
       	hadoop2.0官方提供了两种HDFS HA的解决方案，一种是NFS，另一种是QJM。这里我们使用简单的QJM。在该方案中，主备NameNode之间通过一组JournalNode同步元数据信息，一条数据只要成功写入多数JournalNode即认为写入成功。通常配置奇数个JournalNode
       	这里还配置了一个zookeeper集群，用于ZKFC（DFSZKFailoverController）故障转移，当Active NameNode挂掉了，会自动切换Standby NameNode为standby状态
       	2.hadoop-2.2.0中依然存在一个问题，就是ResourceManager只有一个，存在单点故障，hadoop-2.6.4解决了这个问题，有两个ResourceManager，一个是Active，一个是Standby，状态由zookeeper进行协调
       安装步骤：
       	1.安装配置zooekeeper集群（在hadoop05上）
       		1.1解压
       			tar -zxvf zookeeper-3.4.5.tar.gz -C /home/hadoop/app/
       		1.2修改配置
       			cd /home/hadoop/app/zookeeper-3.4.5/conf/
       			cp zoo_sample.cfg zoo.cfg
       			vim zoo.cfg
       			修改：dataDir=/home/hadoop/app/zookeeper-3.4.5/tmp
       			在最后添加：
       			server.1=hadoop05:2888:3888
       			server.2=hadoop06:2888:3888
       			server.3=hadoop07:2888:3888
       			保存退出
       			然后创建一个tmp文件夹
       			mkdir /home/hadoop/app/zookeeper-3.4.5/tmp
       			echo 1 > /home/hadoop/app/zookeeper-3.4.5/tmp/myid
       		1.3将配置好的zookeeper拷贝到其他节点(首先分别在hadoop06、hadoop07根目录下创建一个hadoop目录：mkdir /hadoop)
       			scp -r /home/hadoop/app/zookeeper-3.4.5/ hadoop06:/home/hadoop/app/
       			scp -r /home/hadoop/app/zookeeper-3.4.5/ hadoop07:/home/hadoop/app/
       			
       			注意：修改hadoop06、hadoop07对应/hadoop/zookeeper-3.4.5/tmp/myid内容
       			hadoop06：
       				echo 2 > /home/hadoop/app/zookeeper-3.4.5/tmp/myid
       			hadoop07：
       				echo 3 > /home/hadoop/app/zookeeper-3.4.5/tmp/myid
       	
       	2.安装配置hadoop集群（在hadoop00上操作）
		2.1解压
			tar -zxvf hadoop-2.6.4.tar.gz -C /home/hadoop/app/
		2.2配置HDFS（hadoop2.0所有的配置文件都在$HADOOP_HOME/etc/hadoop目录下）
			#将hadoop添加到环境变量中
			vim /etc/profile
			export JAVA_HOME=/usr/java/jdk1.7.0_55
			export HADOOP_HOME=/hadoop/hadoop-2.6.4
			export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin
			
			#hadoop2.0的配置文件全部在$HADOOP_HOME/etc/hadoop下
			cd /home/hadoop/app/hadoop-2.6.4/etc/hadoop
			
			2.2.1修改hadoo-env.sh
				export JAVA_HOME=/home/hadoop/app/jdk1.7.0_55

    ###############################################################################
    				
    2.2.2修改core-site.xml
    <configuration>
    <!-- 指定hdfs的nameservice为ns1 -->
    <property>
    <name>fs.defaultFS</name>
    <value>hdfs://bi/</value>
    </property>
    <!-- 指定hadoop临时目录 -->
    <property>
    <name>hadoop.tmp.dir</name>
    <value>/home/hadoop/app/hdpdata/</value>
    </property>
    
    <!-- 指定zookeeper地址 -->
    <property>
    <name>ha.zookeeper.quorum</name>
    <value>mini5:2181,mini6:2181,mini7:2181</value>
    </property>
    </configuration>
    
    ###############################################################################
    				
    2.2.3修改hdfs-site.xml
    <configuration>
    <!--指定hdfs的nameservice为bi，需要和core-site.xml中的保持一致 -->
    <property>
    <name>dfs.nameservices</name>
    <value>bi</value>
    </property>
    <!-- bi下面有两个NameNode，分别是nn1，nn2 -->
    <property>
    <name>dfs.ha.namenodes.bi</name>
    <value>nn1,nn2</value>
    </property>
    <!-- nn1的RPC通信地址 -->
    <property>
    <name>dfs.namenode.rpc-address.bi.nn1</name>
    <value>mini1:9000</value>
    </property>
    <!-- nn1的http通信地址 -->
    <property>
    <name>dfs.namenode.http-address.bi.nn1</name>
    <value>mini1:50070</value>
    </property>
    <!-- nn2的RPC通信地址 -->
    <property>
    <name>dfs.namenode.rpc-address.bi.nn2</name>
    <value>mini2:9000</value>
    </property>
    <!-- nn2的http通信地址 -->
    <property>
    <name>dfs.namenode.http-address.bi.nn2</name>
    <value>mini2:50070</value>
    </property>
    <!-- 指定NameNode的edits元数据在JournalNode上的存放位置 -->
    <property>
    <name>dfs.namenode.shared.edits.dir</name>
    <value>qjournal://mini5:8485;mini6:8485;mini7:8485/bi</value>
    </property>
    <!-- 指定JournalNode在本地磁盘存放数据的位置 -->
    <property>
    <name>dfs.journalnode.edits.dir</name>
    <value>/home/hadoop/journaldata</value>
    </property>
    <!-- 开启NameNode失败自动切换 -->
    <property>
    <name>dfs.ha.automatic-failover.enabled</name>
    <value>true</value>
    </property>
    <!-- 配置失败自动切换实现方式 -->
    <property>
    <name>dfs.client.failover.proxy.provider.bi</name>
    <value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
    </property>
    <!-- 配置隔离机制方法，多个机制用换行分割，即每个机制暂用一行-->
    <property>
    <name>dfs.ha.fencing.methods</name>
    <value>
    sshfence
    shell(/bin/true)
    </value>
    </property>
    <!-- 使用sshfence隔离机制时需要ssh免登陆 -->
    <property>
    <name>dfs.ha.fencing.ssh.private-key-files</name>
    <value>/home/hadoop/.ssh/id_rsa</value>
    </property>
    <!-- 配置sshfence隔离机制超时时间 -->
    <property>
    <name>dfs.ha.fencing.ssh.connect-timeout</name>
    <value>30000</value>
    </property>
    </configuration>
    
    ###############################################################################
    			
    2.2.4修改mapred-site.xml
    <configuration>
    <!-- 指定mr框架为yarn方式 -->
    <property>
    <name>mapreduce.framework.name</name>
    <value>yarn</value>
    </property>
    </configuration>	
    
    ###############################################################################
    			
    2.2.5修改yarn-site.xml
    <configuration>
    <!-- 开启RM高可用 -->
    <property>
    <name>yarn.resourcemanager.ha.enabled</name>
    <value>true</value>
    </property>
    <!-- 指定RM的cluster id -->
    <property>
    <name>yarn.resourcemanager.cluster-id</name>
    <value>yrc</value>
    </property>
    <!-- 指定RM的名字 -->
    <property>
    <name>yarn.resourcemanager.ha.rm-ids</name>
    <value>rm1,rm2</value>
    </property>
    <!-- 分别指定RM的地址 -->
    <property>
    <name>yarn.resourcemanager.hostname.rm1</name>
    <value>mini3</value>
    </property>
    <property>
    <name>yarn.resourcemanager.hostname.rm2</name>
    <value>mini4</value>
    </property>
    <!-- 指定zk集群地址 -->
    <property>
    <name>yarn.resourcemanager.zk-address</name>
    <value>mini5:2181,mini6:2181,mini7:2181</value>
    </property>
    <property>
    <name>yarn.nodemanager.aux-services</name>
    <value>mapreduce_shuffle</value>
    </property>
    </configuration>
    			
    				
    2.2.6修改slaves(slaves是指定子节点的位置，因为要在hadoop01上启动HDFS、在hadoop03启动yarn，所以hadoop01上的slaves文件指定的是datanode的位置，hadoop03上的slaves文件指定的是nodemanager的位置)
    mini5
    mini6
    mini7
    
    			2.2.7配置免密码登陆
    				#首先要配置hadoop00到hadoop01、hadoop02、hadoop03、hadoop04、hadoop05、hadoop06、hadoop07的免密码登陆
    				#在hadoop01上生产一对钥匙
    				ssh-keygen -t rsa
    				#将公钥拷贝到其他节点，包括自己
    				ssh-coyp-id hadoop00
    				ssh-coyp-id hadoop01
    				ssh-coyp-id hadoop02
    				ssh-coyp-id hadoop03
    				ssh-coyp-id hadoop04
    				ssh-coyp-id hadoop05
    				ssh-coyp-id hadoop06
    				ssh-coyp-id hadoop07
    				#配置hadoop02到hadoop04、hadoop05、hadoop06、hadoop07的免密码登陆
    				#在hadoop02上生产一对钥匙
    				ssh-keygen -t rsa
    				#将公钥拷贝到其他节点
    				ssh-coyp-id hadoop03				
    				ssh-coyp-id hadoop04
    				ssh-coyp-id hadoop05
    				ssh-coyp-id hadoop06
    				ssh-coyp-id hadoop07
    				#注意：两个namenode之间要配置ssh免密码登陆，别忘了配置hadoop01到hadoop00的免登陆
    				在hadoop01上生产一对钥匙
    				ssh-keygen -t rsa
    				ssh-coyp-id -i hadoop00				
    		
    		2.4将配置好的hadoop拷贝到其他节点
    			scp -r /hadoop/ hadoop02:/
    			scp -r /hadoop/ hadoop03:/
    			scp -r /hadoop/hadoop-2.6.4/ hadoop@hadoop04:/hadoop/
    			scp -r /hadoop/hadoop-2.6.4/ hadoop@hadoop05:/hadoop/
    			scp -r /hadoop/hadoop-2.6.4/ hadoop@hadoop06:/hadoop/
    			scp -r /hadoop/hadoop-2.6.4/ hadoop@hadoop07:/hadoop/
    			
    			
    			
    ###注意：严格按照下面的步骤!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    		2.5启动zookeeper集群（分别在mini5、mini6、mini7上启动zk）
    			cd /hadoop/zookeeper-3.4.5/bin/
    			./zkServer.sh start
    			#查看状态：一个leader，两个follower
    			./zkServer.sh status
    			
    		2.6启动journalnode（分别在在mini5、mini6、mini7上执行）
    			cd /hadoop/hadoop-2.6.4
    			sbin/hadoop-daemon.sh start journalnode
    			#运行jps命令检验，hadoop05、hadoop06、hadoop07上多了JournalNode进程
    		
    		2.7格式化HDFS
    			#在mini1上执行命令:
    			hdfs namenode -format
    			#格式化后会在根据core-site.xml中的hadoop.tmp.dir配置生成个文件，这里我配置的是/hadoop/hadoop-2.6.4/tmp，然后将/hadoop/hadoop-2.6.4/tmp拷贝到hadoop02的/hadoop/hadoop-2.6.4/下。
    			scp -r tmp/ hadoop02:/home/hadoop/app/hadoop-2.6.4/
    			##也可以这样，建议hdfs namenode -bootstrapStandby
    		
    		2.8格式化ZKFC(在mini1上执行一次即可)
    			hdfs zkfc -formatZK
    		
    		2.9启动HDFS(在mini1上执行)
    			sbin/start-dfs.sh
    
    		2.10启动YARN(#####注意#####：是在hadoop02上执行start-yarn.sh，把namenode和resourcemanager分开是因为性能问题，因为他们都要占用大量资源，所以把他们分开了，他们分开了就要分别在不同的机器上启动)
    			sbin/start-yarn.sh
    
    		
    	到此，hadoop-2.6.4配置完毕，可以统计浏览器访问:
    		http://hadoop00:50070
    		NameNode 'hadoop01:9000' (active)
    		http://hadoop01:50070
    		NameNode 'hadoop02:9000' (standby)
    	
    	验证HDFS HA
    		首先向hdfs上传一个文件
    		hadoop fs -put /etc/profile /profile
    		hadoop fs -ls /
    		然后再kill掉active的NameNode
    		kill -9 <pid of NN>
    		通过浏览器访问：http://192.168.1.202:50070
    		NameNode 'hadoop02:9000' (active)
    		这个时候hadoop02上的NameNode变成了active
    		在执行命令：
    		hadoop fs -ls /
    		-rw-r--r--   3 root supergroup       1926 2014-02-06 15:36 /profile
    		刚才上传的文件依然存在！！！
    		手动启动那个挂掉的NameNode
    		sbin/hadoop-daemon.sh start namenode
    		通过浏览器访问：http://192.168.1.201:50070
    		NameNode 'hadoop01:9000' (standby)
    	
    	验证YARN：
    		运行一下hadoop提供的demo中的WordCount程序：
    		hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.4.1.jar wordcount /profile /out
    	
    	OK，大功告成！！！
    
    	
    			
    		
    	测试集群工作状态的一些指令 ：
    	bin/hdfs dfsadmin -report	 查看hdfs的各节点状态信息


	    bin/hdfs haadmin -getServiceState nn1		 获取一个namenode节点的HA状态
        
	    sbin/hadoop-daemon.sh start namenode  单独启动一个namenode进程
        
        
	    ./hadoop-daemon.sh start zkfc   单独启动一个zkfc进程
		
================================================================================================================

12. hive安装--remote模式：
		（a）配置HIVE_HOME环境变量  vi conf/hive-env.sh 配置其中的$hadoop_home
		
		 (c) 将mysql-connector-java-5.1.32-bin的放入hive的依赖包目录下（.../lib）
		
		（b）配置元数据库信息   vi  hive-site.xml （mv hive-default.xml.template hive.site.xml）:
			将hive-site.xml配置文件拆为如下两部分
        	 1). 服务端配置文件
						   
				<configuration>  
				<property>  
				  <name>hive.metastore.warehouse.dir</name>  
				  <value>/user/hive/warehouse</value>  
				</property>  
				<property>  
				  <name>javax.jdo.option.ConnectionURL</name>  
				  <value>jdbc:mysql://192.168.57.6:3306/hive?createDatabaseIfNotExist=true</value>  
				</property>  
				<property>  
				  <name>javax.jdo.option.ConnectionDriverName</name>  
				  <value>com.mysql.jdbc.Driver</value>  
				</property>     
				<property>  
				  <name>javax.jdo.option.ConnectionUserName</name>  
				  <value>root</value>  
				</property>  
				<property>  
				  <name>javax.jdo.option.ConnectionPassword</name>  
				  <value>123456</value>  
				</property>  
				</configuration>  
			
		2). 客户端配置文件
			
				<configuration>  
				  
				<property>  
				  <name>hive.metastore.warehouse.dir</name>  
				  <value>/user/hive/warehouse</value>  
				</property>  
				   
				<property>  
				  <name>hive.metastore.local</name>  
				  <value>false</value>  
				</property>  
				  
				<property>  
				  <name>hive.metastore.uris</name>  
				  <value>thrift://192.168.57.5:9083</value>  
				</property>  
				  
				</configuration>  
				
				beeline方式启动
				 服务端： 
					hiveserver2  
				
				 客户端: 
					beeline;
					!connect jdbc:hive2://ip(服务端)：10000
					输入用户名&密码
					
=========================================================================================================================

13. hbase安装：
		hbase完全分布式搭建
		1、准备工作
			网络
			防火墙
			hosts
			ssh
				ssh-keygen
				ssh-copy-id -i id_rsa.pub node1
			设置linux时间   时间服务器
			ntpdate 
			ntpdate ntp1.aliyun.com
		2、下载解压
		3、配置
			1). hbase-env.sh	JAVA_HOME  HBASE_MANAGES_ZK(false)
			2). hbase-site.xml
					<property>
		 			   <name>hbase.rootdir</name>
		 			   <value>hdfs://bjsxt/hbase</value> 	###（bjsxt: 替换为hdfs的namenode的集群名称）
		 			 </property>
		 			 <property>
		 			   <name>hbase.cluster.distributed</name>
		 			   <value>true</value>
		 			 </property>
		 			 <property>
		 			   <name>hbase.zookeeper.quorum</name>
		 			   <value>node1,node2,node3</value>
		 			 </property>
			3). regionservers
					node2
					node3
					node4
			4). backup-masters
					node4
			5). 拷贝hdfs-site.xml到hbase/conf/
			6). 在任一zookeeper机器上，启动zkCli.sh命令启动客户端，创建/hbase结点：create /hbase myhbase(结点值)
			
						
		4. 启动
			配置HBASE_HOME及环境变量
			start-hbase.sh
			hbase shell
			
			
14. sqoop
		1). 安装：
			a. 解压
			b. 配置环境变量 
				export SQOOP_HOME=/XX/sqoop.xx
				source /etc/profile
			c. 添加数据库驱动包
				cp mysql-connector-java-5.1.10.jar /sqoop-install-path/lib
			d. 重命名配置文件
				mv sqoop-env-template.sh sqoop-env.sh
				
		2). 运行时环境：
			hdfs
			yarn
			zookeeper
			mysql
				
		3). 使用：
			a. sqoop help，获取常用命令
			
			b. 示例：
				sqoop list-databases --connect jdbc:mysql://master:3306 --username root --password ***
				
			c. mysql通过sqoop导入数据至hdfs:
				通过查询mysql数据库test中的表name_info，将查询结果导入hdfs的/sqoop目录下：
					import
					
					--connect
					jdbc:mysql://master:3306/test
					--username
					root
					--password
					hujiaxing

					--columns
					id, age, email
					--delete-target-dir
					-m
					1
					--table
					name_info
					--target-dir
					/sqoop
				
			d. hdfs数据通过sqoop导入至mysql中：
				将hdfs的/sqoop目录下的表信息导入至mysql数据库test中的export_from_hdfs表格中
				(该表格需预先在mysql中创建)
					export

					--connect
					jdbc:mysql://master:3306/test
					--username
					root
					--password
					hujiaxing

					--columns
					id, age, email
					-m
					1
					--export-dir
					/sqoop/
					--table
					export_from_hdfs	
					
					
15. hive和hbase整合：
		1). 整合：
			hive和hbase同步
				https://cwiki.apache.org/confluence/display/Hive/HBaseIntegration

				1、把hive-hbase-handler-1.2.1.jar  cp到hbase/lib 下
					同时把hbase中的所有的jar，cp到hive/lib (服务端和客户端都需要拷贝)

				2、在hive的配置文件增加属性：
				  <property>
					<name>hbase.zookeeper.quorum</name>
					<value>node1,node2,node3</value>
				  </property>
				
		2). 在hive中创建临时表：
				a. 内部表
					a. 创建：
						CREATE TABLE hbasetbl(key int, value string) 
						STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
						WITH SERDEPROPERTIES ("hbase.columns.mapping" = ":key,cf1:val")
						TBLPROPERTIES ("hbase.table.name" = "xyz", "hbase.mapred.output.outputtable" = "xyz");
						
					b. 检验是否映射成功：
						show tables命令查看表格是否创建成功；
						hive客户端向hbasetbl表格中出入数据：
							insert into hbasetbl values (1, 'Robin');
						在hbase客户端查看数据是否存在：
							scan 'xyz'
					
						
				b. 外部表：适用于hdfs中已存在大量的数据文件
					CREATE EXTERNAL TABLE tmp_order 
					(key string, id string, user_id string)  
					STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'  
					WITH SERDEPROPERTIES ("hbase.columns.mapping" = ":key,order:order_id,order:user_id")  
					TBLPROPERTIES ("hbase.table.name" = "t_order");
						
						
						
						
						
						
						
						
						
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
					
					
					
					
					
					
					
					
					
					
					
					
					
					
		
		
		
		
		
		
		
		
		
		
		
				